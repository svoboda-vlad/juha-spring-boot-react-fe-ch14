{"version":3,"sources":["constants.js","components/AddCar.js","components/EditCar.js","components/Carlist.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["SERVER_URL","AddCar","props","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","_useState3","brand","model","year","color","price","_useState4","car","setCar","handleClose","handleChange","event","objectSpread2","defineProperty","target","name","value","react_default","a","createElement","Button_default","variant","style","margin","onClick","Dialog_default","onClose","DialogTitle_default","DialogContent_default","TextField_default","autoFocus","fullWidth","label","onChange","DialogActions_default","addCar","EditCar","size","fuel","updateCar","link","Carlist","_this","classCallCheck","this","_super","call","fetchCars","token","sessionStorage","getItem","fetch","headers","Authorization","then","response","json","responseData","setState","cars","_embedded","catch","err","console","error","onDelClick","window","confirm","method","res","toast","success","position","POSITION","BOTTOM_LEFT","state","_this2","Content-Type","body","JSON","stringify","_this3","_this4","columns","Header","accessor","sortable","filterable","width","Cell","_ref","row","components_EditCar","_ref2","className","Grid_default","container","item","components_AddCar","padding","react_csv","data","separator","es","react_toastify","autoClose","Component","Login","username","password","user","setUser","isAuthenticated","setAuth","components_Carlist","type","jwtToken","get","setItem","warn","App","AppBar_default","Toolbar_default","Typography_default","components_Login","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53bd54a5.chunk.js","sourcesContent":["export const SERVER_URL = 'http://localhost:8080/'","import React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst AddCar = (props) => {\n  const [open, setOpen] = useState(false);\n  const [car, setCar] = useState({brand: '', model: '', year: '', color: '', price: ''});\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleChange = (event) => {\n    setCar({...car, [event.target.name]: event.target.value});\n  }\n\n  // Save car and close modal form\n  const handleSave = () => {\n    props.addCar(car);\n    handleClose();\n  }\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" style={{margin: 10}} onClick={handleClickOpen}>\n        New Car\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n          <DialogTitle>New car</DialogTitle>\n          <DialogContent>\n            <TextField autoFocus fullWidth label=\"Brand\" name=\"brand\" \n              value={car.brand} onChange={handleChange}/> \n            <TextField fullWidth label=\"Model\" name=\"model\" \n              value={car.model} onChange={handleChange}/>\n            <TextField fullWidth label=\"Color\" name=\"color\" \n              value={car.color} onChange={handleChange}/>\n            <TextField fullWidth label=\"Year\" name=\"year\" \n              value={car.year} onChange={handleChange}/>\n            <TextField fullWidth label=\"Price\" name=\"price\" \n              value={car.price} onChange={handleChange}/>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"secondary\" onClick={handleClose}>Cancel</Button>\n            <Button color=\"primary\" onClick={handleSave}>Save</Button>\n          </DialogActions>\n        </Dialog>      \n    </div>\n  );\n};\n\nexport default AddCar;","import React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst EditCar = (props) => {\n  const [open, setOpen] = useState(false);\n  const [car, setCar] = useState({brand: '', model: '', year: '', color: '', price: ''});\n\n  const handleClickOpen = () => {\n    setCar({brand: props.car.brand, model: props.car.model, color: props.car.color,\n      year: props.car.year, fuel: props.car.fuel, price: props.car.price })\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleChange = (event) => {\n    setCar({...car, [event.target.name]: event.target.value});\n  }\n\n  // Update car and close modal form\n  const handleSave = () => {\n    props.updateCar(car, props.link);\n    handleClose();\n  }\n\n  return (\n    <div>\n      <Button color=\"primary\" size=\"small\" onClick={handleClickOpen}>Edit</Button>\n      <Dialog open={open} onClose={handleClose}>\n          <DialogTitle>Edit car</DialogTitle>\n          <DialogContent>\n            <TextField autoFocus fullWidth label=\"Brand\" name=\"brand\" \n                value={car.brand} onChange={handleChange}/> \n              <TextField fullWidth label=\"Model\" name=\"model\" \n                value={car.model} onChange={handleChange}/>\n              <TextField fullWidth label=\"Color\" name=\"color\" \n                value={car.color} onChange={handleChange}/>\n              <TextField fullWidth label=\"Year\" name=\"year\" \n                value={car.year} onChange={handleChange}/>\n              <TextField fullWidth label=\"Price\" name=\"price\" \n                value={car.price} onChange={handleChange}/>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"secondary\" onClick={handleClose}>Cancel</Button>\n            <Button color=\"primary\" onClick={handleSave}>Save</Button>\n          </DialogActions>\n        </Dialog>      \n    </div>\n  );\n};\n\nexport default EditCar;","import React, { Component } from 'react';\nimport {SERVER_URL} from '../constants.js'\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AddCar from './AddCar';\nimport EditCar from './EditCar';\nimport { CSVLink } from 'react-csv';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nclass Carlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { cars: [] };\n  } \n\n  componentDidMount() {\n    this.fetchCars();\n  }\n  \n  fetchCars = () => {\n    // Read the token from the session storage\n    // and include it to Authorization header\n    const token = sessionStorage.getItem(\"jwt\");\n    fetch(SERVER_URL + 'api/cars', \n    {\n      headers: {'Authorization': token}\n    })\n    .then((response) => response.json()) \n    .then((responseData) => { \n      this.setState({ \n        cars: responseData._embedded.cars,\n      }); \n    })\n    .catch(err => console.error(err)); \n  }\n\n  // Delete car\n  onDelClick = (link) => {\n    if (window.confirm('Are you sure to delete?')) {\n      const token = sessionStorage.getItem(\"jwt\");\n      fetch(link, \n      { \n        method: 'DELETE',\n        headers: {'Authorization': token}\n      })\n      .then(res => {\n        toast.success(\"Car deleted\", {\n          position: toast.POSITION.BOTTOM_LEFT\n        });\n        this.fetchCars();\n      })\n      .catch(err => {\n        toast.error(\"Error when deleting\", {\n          position: toast.POSITION.BOTTOM_LEFT\n        });\n        console.error(err)\n      }) \n    } \n  }\n\n  // Add new car\n  addCar(car) {\n    const token = sessionStorage.getItem(\"jwt\");\n    fetch(SERVER_URL + 'api/cars', \n      { method: 'POST', \n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token\n        },\n        body: JSON.stringify(car)\n      })\n    .then(res => this.fetchCars())\n    .catch(err => console.error(err))\n  } \n\n  // Update car\n  updateCar(car, link) {\n    const token = sessionStorage.getItem(\"jwt\");\n    fetch(link, \n    { method: 'PUT', \n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(car)\n    })\n    .then(res => {\n      toast.success(\"Changes saved\", {\n        position: toast.POSITION.BOTTOM_LEFT\n      });\n      this.fetchCars();\n    })\n    .catch(err => \n      toast.error(\"Error when saving\", {\n        position: toast.POSITION.BOTTOM_LEFT\n      }) \n    )\n  }\n\n  render() {\n    const columns = [{\n      Header: 'Brand',\n      accessor: 'brand'\n    }, {\n      Header: 'Model',\n      accessor: 'model',\n    }, {\n      Header: 'Color',\n      accessor: 'color',\n    }, {\n      Header: 'Year',\n      accessor: 'year',\n    }, {\n      Header: 'Price €',\n      accessor: 'price',\n    }, {\n      sortable: false,\n      filterable: false,\n      width: 100,      \n      accessor: '_links.self.href',\n      Cell: ({value, row}) => (<EditCar car={row} link={value} updateCar={this.updateCar} fetchCars={this.fetchCars} />),\n    }, {\n      sortable: false,\n      filterable: false,\n      width: 100,\n      accessor: '_links.self.href',\n      Cell: ({value}) => (<Button size=\"small\" color=\"secondary\" \n        onClick={()=>{this.onDelClick(value)}}>Delete</Button>)\n    }]\n\n    return (\n      <div className=\"App\">\n        <Grid container>\n          <Grid item>\n            <AddCar addCar={this.addCar} fetchCars={this.fetchCars} />\n          </Grid>\n          <Grid item style={{padding: 15}}>\n            <CSVLink data={this.state.cars} separator=\";\">Export CSV</CSVLink>\n          </Grid>\n        </Grid>\n        <ReactTable data={this.state.cars} columns={columns} \n          filterable={true}/>\n        <ToastContainer autoClose={1500} /> \n      </div>\n    );\n  }\n}\n\nexport default Carlist;","import React, { useState } from 'react';\nimport {SERVER_URL} from '../constants.js';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Carlist from './Carlist';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Login = () => {\n  const [user, setUser] = useState({username: '', password: ''})\n  const [isAuthenticated, setAuth] = useState(false);\n \n  const handleChange = (event) => {\n    setUser({...user, [event.target.name] : event.target.value})\n  }\n\n  const login = () => {\n    fetch(SERVER_URL + 'login', {\n      method: 'POST',\n      body: JSON.stringify(user)\n    })\n    .then(res => {\n      const jwtToken = res.headers.get('Authorization');\n      if (jwtToken !== null) {\n        sessionStorage.setItem(\"jwt\", jwtToken);\n        setAuth(true);\n      }\n      else {\n        toast.warn(\"Check your username and password\", {\n          position: toast.POSITION.BOTTOM_LEFT\n        }) \n      }\n    })\n    .catch(err => console.error(err)) \n  }  \n\n  if (isAuthenticated === true) {\n    return (<Carlist />)\n  }\n  else {\n    return (\n      <div>\n        <TextField name=\"username\" \n          label=\"Username\" onChange={handleChange} /><br/> \n        <TextField type=\"password\" name=\"password\" \n          label=\"Password\" onChange={handleChange} /><br/><br/> \n        <Button variant=\"outlined\" color=\"primary\" \n          onClick={login}>\n          Login\n        </Button>\n        <ToastContainer autoClose={1500} /> \n      </div>\n    );\n  }\n}\n\nexport default Login;","import React from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            CarList\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}